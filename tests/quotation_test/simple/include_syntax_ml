#use "topfind.camlp5";;
#camlp5o ;;
#require "pa_ppx.testutils";;
open Pa_ppx_testutils.Papr_util ;;

#require "camlp5.pr_o" ;;

let pp_ctyp ty = Fmt.(pf stdout "#<ctyp< %s >>" (Eprinter.apply Pcaml.pr_ctyp Pprintf.empty_pc ty));;
let pp_expr ty = Fmt.(pf stdout "#<expr< %s >>" (Eprinter.apply Pcaml.pr_expr Pprintf.empty_pc ty));;
let pp_patt ty = Fmt.(pf stdout "#<patt< %s >>" (Eprinter.apply Pcaml.pr_patt Pprintf.empty_pc ty));;
let pp_str_item ty = Fmt.(pf stdout "#<str_item< %s >>" (Eprinter.apply Pcaml.pr_str_item Pprintf.empty_pc ty));;

#install_printer pp_ctyp ;;
#install_printer pp_expr ;;
#install_printer pp_patt ;;
#install_printer pp_str_item ;;


print_string "================ START ================\n";; flush stdout ;;

#require "camlp5.parser_quotations";;
#require "pa_ppx_q_ast_quotation_test";;
(*
#require "pa_ppx_q_ast_test_cleanup";;
 *)
Pr_o.sep := Some ";;\n";;
Pa_ppx_base.Pa_passthru.debug := true ;;
(*
#trace Pa_ppx_test_cleanup.rewrite_str_item ;;
 *)
#trace Pa_ppx_quotation_test.compute_expansion_dict ;;
#trace Pa_ppx_quotation_test.expr_list_of_type_gen_uncurried ;;
#trace Pa_ppx_quotation_test.expr_of_cons_decl ;;
#trace Pa_ppx_quotation_test.expr_list_of_type_decl ;;
#trace Pa_ppx_quotation_test.expr_list_of_record_ctyp ;;
#trace Pa_ppx_quotation_test.expr_list_of_variant_ctyp ;;
#trace Pa_ppx_quotation_test.do_expand_type ;;

{|
type t3a = Type1.t3a = U | V
and t3b =
  Type1.t3b =
      X of t3a
    | Y of t3a
    | Z of t3a loc
and 'a loc = 'a Type1.loc = { txt : 'a; loc : Location.t }[@@deriving quotation_test {test_types = [t3b]; expand_types_per_constructor = [X, [t3a]; Z, [t3a; loc]]}]
|} |> PAPR.Implem.pa1 |> PAPR.Implem.pr |> print_string ;;

(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
