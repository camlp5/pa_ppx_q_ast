#use "topfind.camlp5";;
#camlp5o ;;
#require "pa_ppx.testutils";;
open Pa_ppx_testutils.Papr_util ;;

#require "camlp5.pr_r" ;;

let pp_ctyp pps ty = Fmt.(pf pps "#<ctyp< %s >>" (Eprinter.apply Pcaml.pr_ctyp Pprintf.empty_pc ty));;
let pp_expr pps ty = Fmt.(pf pps "#<expr< %s >>" (Eprinter.apply Pcaml.pr_expr Pprintf.empty_pc ty));;
let pp_patt pps ty = Fmt.(pf pps "#<patt< %s >>" (Eprinter.apply Pcaml.pr_patt Pprintf.empty_pc ty));;
let pp_str_item pps ty = Fmt.(pf pps "#<str_item< %s >>" (Eprinter.apply Pcaml.pr_str_item Pprintf.empty_pc ty));;

#install_printer pp_ctyp ;;
#install_printer pp_expr ;;
#install_printer pp_patt ;;
#install_printer pp_str_item ;;


print_string "================ START ================\n";; flush stdout ;;

#require "camlp5.parser_quotations";;
#require "pa_ppx.import" ;;
Pa_ppx_import.add_include "." ;;
#require "pa_ppx_q_ast_quotation_test";;
#require "pa_ppx_q_ast_test_cleanup";;

Pr_r.sep := Some ";\n";;
(*
Pa_ppx_base.Pa_passthru.debug := true ;;
#trace Pa_ppx_test_cleanup.rewrite_str_item ;;
#trace Pa_ppx_quotation_test.compute_expansion_dict ;;
#trace Pa_ppx_quotation_test.expr_list_of_type_gen_uncurried ;;
#trace Pa_ppx_quotation_test.expr_list_of_variant_ctyp ;;
#trace Pa_ppx_quotation_test.do_expand_type ;;
#trace Pa_ppx_quotation_test.expr_list_of_type_decl ;;
#trace Pa_ppx_quotation_test.expr_list_of_record_ctyp ;;
#trace Pa_ppx_quotation_test.name_of_vars ;;
 *)
#trace Pa_ppx_quotation_test.expr_of_cons_decl ;;
#trace Pa_ppx_quotation_test.process_add_dels ;;

{|
[%%import: Types.t5
 [@add type t4 = [%import: Types.t4]]
 [@add type t4' = [%import: Types.t4']]
]
[@@deriving quotation_test {test_types = [t5]; expand_types = {t4 = Auto; t4' = Auto}}]
|} |> PAPR.Implem.pa1 |> PAPR.Implem.pr |> print_string ;;


{|
[%%import: Types.t5
 [@add type t4 = [%import: Types.t4]]
 [@add type t4' = [%import: Types.t4']]
][@@deriving quotation_test {
        test_types = [t5]
      ; per_constructor_expansion = [
          (A, AddDel (
                  [],
                  [
                    Types.A (U 1, U 2);
                    Types.A (U 2, U 1)
                  ]
          ))
        ]
      ; expand_types = {
          t4 = Explicit [U 1; U 2]
        ; t4' = Auto
        }
  }]
|} |> PAPR.Implem.pa1 |> PAPR.Implem.pr |> print_string ;;


(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
