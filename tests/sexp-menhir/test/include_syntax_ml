#use "topfind.camlp5";;
#camlp5o ;;
#require "pa_ppx.testutils";;
open Pa_ppx_testutils.Papr_util ;;

#require "camlp5.pr_o" ;;

let pp_ctyp ty = Fmt.(pf stdout "#<ctyp< %s >>" (Eprinter.apply Pcaml.pr_ctyp Pprintf.empty_pc ty));;
let pp_expr ty = Fmt.(pf stdout "#<expr< %s >>" (Eprinter.apply Pcaml.pr_expr Pprintf.empty_pc ty));;
let pp_patt ty = Fmt.(pf stdout "#<patt< %s >>" (Eprinter.apply Pcaml.pr_patt Pprintf.empty_pc ty));;

#install_printer pp_ctyp ;;
#install_printer pp_expr ;;
#install_printer pp_patt ;;


print_string "================ START ================\n";; flush stdout ;;

#require "sexp_menhir_example.parser_quotations";;
#require "pa_ppx_quotation2extension";;

let pp_hum_sexp se = Fmt.(pf stdout "<sexp< %a >>" Sexp.Normal.pp_hum se) ;;
#install_printer pp_hum_sexp ;;
(*
let pp_hum_pattern_sexp se = Fmt.(pf stdout "<pattern_sexp< %a >>" Sexp.Pattern.pp_hum se) ;;
#install_printer pp_hum_pattern_sexp ;;
 *)

{| (a b c) |} |> Sexp_parse.sexp ;;
{| (a $atom:b$ c) |} |> Sexp_parse.pattern_sexp ;;

{|
<:sexp< ($a$ $atom:b$) >>
 |} |> PAPR.Implem.pa1 |> PAPR.Implem.pr |> print_string ;;


(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
